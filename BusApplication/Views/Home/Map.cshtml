<!DOCTYPE html>
<html lang="hu">
<head>
   
    <style>
        .box {
            position: absolute;
            float:left;
        }

            .box select {
                background-color: #0563af;
                color: white;
                padding: 14px;
                border: none;
                box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
                -webkit-appearance: button;
                outline: none;
            }

            /*.box::before {
                content: "\f107";
                position: absolute;
                top: 0;
                right: 0;
                width: 20%;
                height: 100%;
                text-align: center;
                font-size: 28px;
                line-height: 45px;
                color: rgba(255, 255, 255, 0.5);
                background-color: rgba(255, 255, 255, 0.1);
                pointer-events: none;
            }
                */
            .box:hover::before {
                color: rgba(255, 255, 255, 0.6);
                background-color: rgba(255, 255, 255, 0.2);
            }

            .box select option {
                padding: 30px;
            }

        #mapid {
            height: 600px;
        }

        .hidden{
            display:none;
        }

        .lista {
            position: static;
            list-style-type: none;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #333;
        }

        #elem {
            float: left;
        }

            #elem a {
                display: block;
                color: white;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
            }

                #elem a:hover:not(.active) {
                    background-color: #71B6E6;
                    color: black;
                }

                #elem a:hover, a:focus {
                    color: white;
                }

        #buses{
            position: relative;
            font-family: 'Lucida Sans';
            font-size: 20px;
            background-color: #71B6E6;
            color:white;
            width: 200px;
            height: 40px;
        }
        #busStations {
            position: relative;
            font-family: 'Lucida Sans';
            font-size: 20px;
            background-color: #71B6E6;
            color:white;
            width: 200px;
            height: 40px;
        }


          


    </style>
    <meta charset="utf-8" />
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="theme-color" content="#000000" />

    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css"
          integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA=="
          crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"
            integrity="sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg=="
            crossorigin=""></script>
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <ul class="lista">

     
        <li id="elem"><a id="Bus" href="#">Bus</a></li>
        <li id="elem"><a id="stations" href="#">Stations</a></li>
        <li id="elem"><a id="lines" href="#">Lines</a></li>
        <li id="elem">
            <div class="box">
                <select class="hidden" id="dropdown" style="background-color:#9C9C9C">
                    <option title="Please select a bus." value="-1">Routes</option>
                    @foreach (var bus in ViewBag.BusInfo)
                    {
                        @:<option title="@bus.BusId" value="@bus.BusId">@bus.BusName</option>
                    }
                </select>
            </div>
        </li>
    </ul>




    @* Slidebar *@



    <div id="mapid"></div>

    <div>
        <select required id="buses" onchange="changeStations()">
            <option value="" disabled selected> Select a bus </option>
        </select>

        <select required id="busStations" onchange="showTime(this)">
            <option value="" disabled selected> Select a station </option>
        </select>
        <b id="timetable"></b>
    </div>
    

    <script>


        //Lekeri a jelenlegi helyzetet
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function showPosition(position) {
            mypos = [position.coords.latitude, position.coords.longitude];
            markMyLocation();
        }
        //Megjeleniti a jelenlegi poziciot
        function markMyLocation() {
            marker = L.marker([46.523454, 24.598617]/*mypos*/).addTo(mymap);
            //console.log(position.coords.latitude + " " + position.coords.longitude);
            marker.bindPopup("<b>Hello user!</b><br>That's your location.").openPopup();
        }


        /////////////////////Events//////////////////////////////
        //Hozzaadja vagy leveszi a Buslayert
        var elm = document.getElementById("Bus");
        elm.onclick=(function (event) {
            event.preventDefault();
            if (mymap.hasLayer(BusLayer)) {
                $(this).removeClass('selected');
                mymap.removeLayer(BusLayer);
            } else {
                $("#dropdown").addClass('hidden');
                $("#lines").removeClass('selected');
                if (mymap.hasLayer(LineLayer)) {
                    mymap.removeLayer(LineLayer);
                }
                mymap.addLayer(BusLayer);
                $(this).addClass('selected');
            }
        });
        //Kezeli a StationLayert
        var elm = document.getElementById("stations");
        elm.onclick = (function (event) {
            event.preventDefault();
            if (mymap.hasLayer(StationsLayer)) {
                $(this).removeClass('selected');
                mymap.removeLayer(StationsLayer);
            } else {
                $("#dropdown").addClass('hidden');
                $("#lines").removeClass('selected');
                if (mymap.hasLayer(LineLayer)) {
                    mymap.removeLayer(LineLayer);
                }
                mymap.addLayer(StationsLayer);
                $(this).addClass('selected');
            }
        });
        //Kezeli a LineLayert
        var elm = document.getElementById("lines");
        elm.onclick = (function (event) {
            event.preventDefault();
            if (mymap.hasLayer(BusLayer)) {
                $("#Bus").removeClass('selected');
                mymap.removeLayer(BusLayer);
            }
            if (mymap.hasLayer(StationsLayer)) {
                $("#stations").removeClass('selected');
                mymap.removeLayer(StationsLayer);
            }
            i = $("#dropdown")
            if (i.hasClass('hidden') == true) {
                i.removeClass('hidden');
                $(this).addClass('selected');
            } else {
                i.addClass('hidden');
                $(this).removeClass('selected');
                if (mymap.hasLayer(LineLayer)) {
                    mymap.removeLayer(LineLayer);
                }
            }
        });

        var elm = document.getElementById("dropdown");
        elm.onchange = (function (event) {
            if (mymap.hasLayer(LineLayer)) {
                mymap.removeLayer(LineLayer);
            }
            var selectedid = $(this).val();//off
            if (selectedid != '-1') {
                var temp = tracesList.map(function (s) {
                    if (s.BusId == selectedid) { return [s.Latitude, s.Longitude] } else { return null };
                });
                temp = temp.filter(function (el) {
                    return el != null;
                });
                if (temp.length != 0) {
                    var firstpolyline = new L.Polyline(temp, {
                        color: 'blue',
                        weight: 3,
                        opacity: 0.5,
                        smoothFactor: 1
                    });
                    var actbus = tracesList.find(function (element) {
                        return element.BusId == selectedid;
                    });
                    var marked = L.marker([actbus.Latitude, actbus.Longitude]).bindPopup("<b>" + actbus.BusId + "</b><br>" + actbus.BusName);

                    LineLayer = L.layerGroup([firstpolyline, marked]);
                    mymap.addLayer(LineLayer);
                }
            }
        });


        //////////////////////////Adatok betoltese////////////////////////////

        //Eloallitja a measureddata adatokat
        var measureddata = [];
        @foreach (var measureddata in ViewBag.MeasuredData)
        {
            @:measureddata.push({ "id": "@measureddata.id", "From": "@measureddata.From", "To": "@measureddata.To", "duration": "@measureddata.duration", "dateTime": "@measureddata.dateTime" });
        }

        //Eloallitja a referencia adatokat
        var references = [];
        @foreach (var references in ViewBag.References)
        {
            @:references.push({ "id": "@references.id", "From": "@references.From", "To": "@references.To", "duration": "@references.duration", "intervalTime": "@references.intervalTime" });
        }

        //Eloallitja a timetable adatokat
        var timetable = [];
        @foreach (var timetable in ViewBag.Timetable)
        {
            @:timetable.push({ "id": "@timetable.id", "busNr": "@timetable.busNr", "startTime": "@timetable.startTime", "stationID": "@timetable.stationID", "weekday": "@timetable.weekday" });
        }

        //Eloallitja a line adatokat
        var lines = [];
        @foreach (var line in ViewBag.Line)
        {
            @:lines.push({ "Id": "@line.ID", "LineId": "@line.LineID", "StationID": "@line.StationID", "StationNr": "@line.StationNr" });
        }

        //Eloallitja a traceslist adatokat
        var tracesList = [];
        @foreach (var bus in ViewBag.BusTrace)
        {
           @:tracesList.push({ "Id": "@bus.Id", "BusId": "@bus.BusId", "Longitude": parseFloat("@bus.Longitude".replace(',', '.')),"Latitude": parseFloat("@bus.Latitude".replace(',', '.'))});
        }

        //Eloallitja a stationoket
        var stationList = [];
        @foreach (var st in ViewBag.Stations)
        {
           @:stationList.push({ "StationName": "@st.StationName", "StationID": "@st.StationID", "Longitude": parseFloat("@st.Longitude".replace(',', '.')),"Latitude": parseFloat("@st.Latitude".replace(',', '.'))});
        }

         //Eloallitja a buszok listajat
        var busList = [];
        @foreach (var bus in ViewBag.Bus)
        {
           @:busList.push({ "BusName": "@bus.BusName", "BusId": "@bus.BusId", "Timestamp": "@bus.Timestamp", "Longitude": parseFloat("@bus.Longitude".replace(',', '.')),"Latitude": parseFloat("@bus.Latitude".replace(',', '.'))});
        }

        var busInfoList = [];
        @foreach (var bus in ViewBag.BusInfo)
        {
           @:busInfoList.push({ "BusName": "@bus.BusName", "BusId": "@bus.BusId" });@*, "Longitude": parseFloat("@bus.Actual_Longitude".replace(',', '.')),"Latitude": parseFloat("@bus.Actual_Latitude".replace(',', '.'))});*@
        }
        var LineLayer;

        /*
        var temp = tracesList.map(function (s) {
            if(s.BusId = "27") { return [s.Latitude, s.Longitude] };
        });
        var firstpolyline = new L.Polyline(temp, {
            color: 'red',
            weight: 3,
            opacity: 0.5,
            smoothFactor: 1
        });
        var LineLayer = L.layerGroup([firstpolyline]);
        */


        var bList = [];
        busList.forEach(function (b) {
            var currentDate = new Date();
            var currentHour = currentDate.getHours();
            var currentMinute = currentDate.getMinutes();
            
            var d = b.Timestamp;
            d = d.split(' ');
            var time = d[3].split(":");
            var measureDate = new Date(Number(d[0]), Number(d[1]), Number(d[2]), Number(time[0]), Number(time[1]), Number(time[2]));

            //5 minutes = 300 000 milliseconds
            if (((currentDate.getTime() - measureDate.getTime()) * -1) < 300000) {
                bList.push(b);
            }
        })


        var temp = bList.map(function (s) {
           
                return L.marker([s.Latitude, s.Longitude]).bindPopup("<b>" + s.BusId + "</b><br>" + s.BusName);
         
        });


        var BusLayer = L.layerGroup(temp);


        var greenIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });


        //Hozzaadja a station nevet a popuphoz
        var temp = stationList.map(function (s) {
            return L.marker([s.Latitude, s.Longitude], { icon: greenIcon }).bindPopup('<a id=stationName>' + s.StationName + '</a>' + '<br>' + '<button type=button onClick = btnOnClick() > More</> ' );
        });

        function btnOnClick() {
            var stationName = document.getElementById('stationName').innerHTML;
            var stationId = stationList.find(a => a.StationName === stationName).StationID;
            var buses = [];
            lines.forEach((line) => {
                if (line.StationID == stationId) {
                    if (buses.indexOf(line.LineId) == -1) {
                        buses.push(line.LineId);
                    }
                }
            });

            var tTable = [];
            timetable.forEach(function (t) {
                if (buses.indexOf(t.busNr) != -1) {
                    var start = { bus: t.busNr, time: t.startTime, weekDay: t.weekday, startStation: t.stationID };
                    if (tTable.indexOf(start) == -1) {
                        tTable.push(start);
                    }

                }
            });

        }



        var StationsLayer = L.layerGroup(temp);
        //////////////////////////////////////////////////////
        var mypos;
        //var marker;
        var mymap = L.map('mapid').setView([46.5, 24,39], 13);
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoiam9yZHkzMyIsImEiOiJjanRnMWNqaXUxejMzNDl0NTFrdXZrMzhoIn0.UMMjORn922XIANL-aOc8zA', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox.streets',
            accessToken: 'your.mapbox.access.token'
        }).addTo(mymap);

        document.body.onload = getLocation;



        /*function onMapClick(e) {
            alert("You clicked the map at " + e.latlng);
        }

        mymap.on('click', onMapClick);*/



        var busSelect = document.getElementById("buses");
        for (var i = 0; i < busInfoList.length; i++) {
            busSelect.innerHTML = busSelect.innerHTML +
                '<option value="' + busInfoList[i].BusId + '">' + busInfoList[i].BusId + '</option>\n';
        }

        //Start station ids
        var startStationIds = [];
        timetable.forEach((time) => {
            if (startStationIds.indexOf(time.stationID) === -1) {
                startStationIds.push(time.stationID);
            }
        });
        //Start station ids with names
        var startStations = [];
        startStationIds.forEach((id) => {
            var name = stationList.find(a => a.StationID == id).StationName;
            startStations.push({ Id: id, Name: name });
        });

        function changeStations() {
            var busNr = document.getElementById("buses").value;
            var stationId = [];
            var stations = [];
            lines.forEach((line) => {
                if (line.LineId === busNr) {
                    if (stationId.indexOf(line.StationID) == -1) {
                        var stationName = stationList.find(a => a.StationID == line.StationID).StationName;
                        stationId.push(line.StationID);
                        stations.push({ 'stationId': line.StationID, 'stationName': stationName });
                    }
                }
            });

            var stationSelect = document.getElementById("busStations");
            stationSelect.innerHTML = '<option value="" disabled selected> Select a station </option>';
            var busOptions = stationSelect.innerHTML.trim().split('\n');
            for (var i = 0; i < stations.length; i++) {
                stationSelect.innerHTML = stationSelect.innerHTML +
                    '<option value="' + stations[i].stationId + '">' + stations[i].stationName + '</option>';
            }

        }
        //show timetable for selected bus --- add to stationSelect onchange
        function showAllTimes() {
            var busId = document.getElementById("buses").value;
            var date = new Date().toString().split(' ');
            var day = date[0];
            var weekday = 1;
            var time = date[4];
            if (day.toLowerCase() === "sat" || day.toLowerCase === "sun") {
                weekday = 0;
            }
            var timesForDays = [];
            timetable.forEach((item) => {
                if (item.weekday == weekday && item.busNr == busId) {
                    timesForDays.push(item);
                }
            });
            timesForDays.forEach((item) => {
                item.stationName = startStations.find(a => a.Id == item.stationID).Name;
            });
            var times = document.getElementById("timetable");
            var timesForStation1 = [];
            var timesForStation2 = [];
            timesForDays.forEach((item) => {
                if (item.stationID == timesForDays[0].stationID) {
                    timesForStation1.push({ Time: item.startTime, Station: item.stationName });
                } else {
                    timesForStation2.push({ Time: item.startTime, Station: item.stationName });
                }
            });
            times.innerHTML = "<b>" + "Start times:" + "<br>" + timesForStation1[0].Station + "<br>" + timesForStation1.map(a => a.Time).join(', ') + "<br>" +
                timesForStation2[0].Station + ":" + "<br>" + timesForStation2.map(a => a.Time).join(', ') + "</b>";
            console.log(timesForDays);
        }

        //Acccess server to get time data for a station
        function showTime(e) {
            $.ajax({
                type: "GET",
                url: "http://193.226.0.198:5210/WCFService/Service1/web/GetTimeList?StationID=" + e.value,
                crossDomain: true,
                dataType: "jsonp",
                success: function (data) {
                    if (data.length > 0) {
                        data.forEach((item) => {
                            var bus = document.getElementById("buses").value;
                            if (bus == item.busID) {
                                var times = document.getElementById("timetable");
                                times.innerHTML = "Bus arrives in: ";
                                times.innerHTML += item.TheTimeString;
                                console.log(data);
                            }
                        })
                    } else {
                        var times = document.getElementById("timetable");
                        times.innerHTML = "Bus arrives in: ";
                        times.innerHTML += "No data";
                    }
                },
                error: function (request, error) {
                    console.log(request, error);
                }
            });
        }
        

    </script>


</body>
</html>